# shellcheck shell=bash

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# For some advancing usage. Refer to http://linuxcommand.org/lc3_adv_tput.php

############################
# Section 1: ui major function and facilities
# Section 2: ui simple components
# Section 3: ui style
# Section 4: ui art
# Section 5: tput facility
# Section 6: region design
# Section 7: screen design
# Section 8: page design
# Section 9: interative components
############################

# relis on tput command

############################
# Section 1: ui major function and facilities
############################

ui(){
    local f=$1
    case "$f" in
        http://* | https://* | ftp://* |ftps://* | git://* ) 
                                ui_url "$f"         ;;
        :)                      ui_print_var "$@"   ;;
        progressbar|probar)     shift; ui_progressbar "$@" ;;
        cmd|cmdline)            shift; ui_cmdline "$@"     ;;
        table)                  shift; xrc ui/_v0/table; ui_table  "$@" ;;
        *)                      ui_style "$@"       ;;
    esac
}

ui_cmdline(){
    local prompt=${1:-">"}
    if [ $# -gt 1 ]; then
        shift;
        printf "$(ui bold yellow)${prompt} $(ui normal white)%s$(ui end)\n" "$*"
    else
        local line
        while read line; do
            printf "$(ui bold yellow)${prompt} $(ui normal white)%s$(ui end)\n" "$line"
        done
    fi
}

xrc log init ui

############################
# Section 1: ui style
############################
ui_style(){
    while [ $# -gt 0 ]; do
        case "$1" in
            dim|debug)      printf "\033[2m"    ;; # tput dim;;
            underline|under)      printf "\033[4m"    ;; # tput dim;;
            info)           tput setaf 6; tput bold ;;
            error)          tput bold; tput setaf 1 ;;
            warn)           tput bold; tput setaf 3 ;;
            normal)         printf "\033[0m"    ;;  # tput bold
            bold)           printf "\033[1m"    ;;  # tput bold
            black)          tput setaf 0;;
            red)            tput setaf 1;;
            green)          tput setaf 2;;
            yellow)         tput setaf 3;;
            blue)           tput setaf 4;;
            purple|magneta) tput setaf 5;;
            lightblue|cyan) tput setaf 6;;
            white)          tput setaf 7;;
            rev)            printf "\033[7m" ;;
            end)            printf "\033[0m" ;;
            reset)          tput reset ;;
            --) 
                shift; 
                echo -n "$@"
                tput sgr0;
                return 0
        esac
        shift
    done
}

############################
# Section 1: ui simple components
############################

ui_url(){
    echo "$(tput smul)${1:?Provide URL}$(tput rmul)"
}

ui_seperator(){
    local sep maxw
    maxw="$(tput cols)"
    sep="$(seq -f "${1:-—}" -s '' "$maxw")"
    echo "$sep"
}

ui_seperator2(){
    local sep maxw
    maxw=$(( $(tput cols) / 2 ))
    sep="$(seq -f "${1:-—}" -s '' "$maxw")"
    echo "$sep"
}

ui_seperator3(){
    local sep maxw
    maxw=$(( $(tput cols) / 3 ))
    sep="$(seq -f "${1:-—}" -s '' "$maxw")"
    echo "$sep"
}

ui_progress_white(){
    local maxw 
    local number=80 
    local stars 
    local space 
    local percent="$1"
    local color=$(ui green)
    if [ "$percent" -lt 0 ]; then
        percent=${percent#-}
        color=$(ui red)
    fi

    maxw="$(tput cols)"
    [ "$maxw" -lt $number ] && number=$maxw
    stars="$(seq -f "${2:-$(printf " ")}" -s '' "$number")"
    space="$(seq -f " " -s '' "$number")"
    local v=$(( ${#stars} * percent / 100 ))
    local v100=$((100 - v))

    if [ "$percent" -eq 100 ]; then
        printf "${color}( DONE )|%s%s|" "$(ui rev)${stars:0:$v}$(ui end)" "${space:v:$v100}"
    else
        printf "${color}(%3d %% )|%s%s|" "$percent" "$(ui rev)${stars:0:$v}$(ui end)" "${space:v:$v100}"
    fi
    
}

ui_progress(){
    local maxw number=80 stars space percent=$1
    maxw="$(tput cols)"
    [ "$maxw" -lt $number ] && number=$maxw
    stars="$(seq -f "${2:-$(printf "*")}" -s '' "$number")"
    space="$(seq -f " " -s '' "$number")"
    local v=$(( ${#stars} * percent / 100 ))
    local v100=$((100 - v))

    if [ $percent -eq 100 ]; then
        printf "( DONE! )|%s%s|" "$percent" "${stars:0:$v}" "${space:v:$v100}"
    else
        printf "(%3d %% )|%s%s|" "$percent" "${stars:0:$v}" "${space:v:$v100}"
    fi
}

############################
# Section 2: ui art
############################



############################
# Section 2: tput facility
############################

ui_cursor_hide(){
    tput civis
}

ui_cursor_show(){
    tput cvvis
}

ui_cursor_save(){
    tput sc # save the cursor postition
}

ui_cursor_restore(){ 
    tput.rc
}

# reference: https://unix.stackexchange.com/questions/88296/get-vertical-cursor-position/183121#183121
ui_cursor_read(){
    local cv ch IFS
    # tput u7                  # Inquire for cursor position
    # read -sdR CURPOS         # Read cursor position
    # IFS=\; read cv ch <<<"${CURPOS#$'\e['}" # split $CURPOS

    IFS=';' read -sdR -p $'\E[6n' cv ch
    cv="${cv#*[}"

    case $# in
        0) echo "$cv $ch";;
        1) eval "$1=$cv";;
        *) 
            eval "$1=$cv"; 
            eval "$2=$ch";;
    esac
}

############################
# Section 2: region design
############################

ui_region_init(){
    ui_cursor_save
}

ui_region_clear(){
    tput rc # restore to the last cursor position
    # tput ed # clr_eos: clear the characters until the end of screen
}

# TODO: What if the text lines is more than the screen lines?
# Preserve Top N lines? -- This is out choice.
# Provide the scroll design?
# Using the screen design. Clear the screen. Put the codes in the screen. Refresh, then output the final snapshot.
ui_region_update(){
    tput civis # hide cursor

    local maxw maxr end1_row end2_row str linenum=0 IFS
    maxw="$(tput cols)"
    maxr="$(tput lines)" # rows is wrong.

    str="$(eval "$@")"
    while read -r n; do
        (( linenum+=$(( ( ${#n} + maxw - 1 ) / maxw )) ))
    done <<<"$str"

    # Cut down the lines
    if [ "$linenum" -ge "$maxr" ]; then
        ui_log debug linenum!!! "$linenum"
        linenum=$(( maxr - 1 )) # Important Parameter Adjustment
    fi

    ui_region_clear
    ui_cursor_read end1_row

    ui_log debug end1_row "$end1_row"
    ui_log debug linenum "$linenum"
    ui_log debug maxr "$maxr"

    if (( end1_row + linenum > maxr )); then
        ui_log debug "Go up"
        tput rc
        local diff=$((linenum)) # Important Parameter Adjustment
        for i in $(seq $diff); do
            ui_cursor_read end1_row
            printf "\n"
        done

        # tput cud $diff
        tput cuu $diff
        tput sc

        ui_cursor_read end1_row
        # ui_region_clear
    fi

    IFS='' # Important
    local l=0
    echo "$str" |  while read -r n; do
        # Important Parameter Adjustment
        if (( l++ < "$linenum" )); then
            printf "%s\n" "$n"
            tput el
        fi
        
    done

    ui_cursor_read end2_row

    if [ "$end2_row" -lt "$end1_row" ]; then
        for i in $( seq $(( end1_row - end2_row )) ); do
            printf "%${maxw}s\n" " "
        done
    fi

    tput cvvis
}


############################
# Section 2: screen design
############################

## tput screen facility

ui_save_screen() { tput smcup; }
ui_restore_screen() { tput rmcup; }
ui_screen() {
    ui_save_screen
    eval "$@"
    ui_restore_screen
}

@screen() { ui_screen "$@"; }

ui_banner() {
    # echo -n ${BG:-$UI_BG_BLUE}${FG:-$UI_FG_WHITE}
    local FG BG
    FG=$(tput setaf "${1:-$UI_WHITE}")
    BG=$(tput setab "${2:-$UI_BLUE}")
    echo "$FG$BG"
    clear
    cat
}

# ui green bold -- 
# $(ui green/bold -- "hello world")
# $(ui green/bold -- "design")
# $(ui :a1)
# $(ui :a2)
# $(ui :a3)

# w_a1=$(tput)
# w_a2=



RUN_CMD_WITH_INFO() {
    local INFO=$1
    shift 1
    INFO "======================\n"
    INFO "$INFO\n"
    INFO "======================\n"
    eval "$@"
}

RUN_CMD_WITH_STEP() {
    local STEP=$1
    local INFO="STEP $STEP: $2"
    shift 2
    RUN_CMD_WITH_INFO "$INFO" "$@"
}

# x con "**Hello World**"
# x con "# Hello"
# x con "**hello**"
# x con "~hello~"
# x con ""


############################
# Section 9: interactive component
############################

_ui_check_cmd_run(){
    local msg="${1:?Please Provide message}"; shift

    local i

    local filepath="_ui_check_cmd_run.$$.$(date +%s).txt"
    touch "$filepath"
    local code=1
    {
        eval "$@"
        code=$?
        rm "$filepath"
        printf "%s" "$code"
    } | {
        i="-"
        printf "$(ui blue)$(ui bold)%s       $(ui end)$(ui yellow)%s$(ui end)" "$i" "$msg"
        while [ -f "$filepath" ]; do
            sleep 0.1
            case "$i" in
                -)  i="\\"  ;;
                \\) i="|"   ;;
                \|) i="/"   ;;
                /)  i="-"   ;;
            esac
            printf "\r$(ui blue)$(ui bold)%s       $(ui end)$(ui yellow)%s$(ui end)" "$i" "$msg"
        done

        read -r code
        [ "$code" -eq 0 ]
    }
}

ui_check_cmd(){
    local msg="${1:?Please Provide message}";

    if _ui_check_cmd_run "$@"; then
        printf "\r$(ui green)$(ui bold)%s       %s$(ui end)\n"  "√" "$msg"
    else
        printf "\r$(ui red)$(ui bold)%s       %s$(ui end)\n"    "X" "$msg"
    fi
}

ui_progressbar(){
    local code=0
    ui_progress "$code"; 
    while read -r code; do
        printf "\r";
        ui_progress_white "$code"
        [ $code -lt 0 ] && break
        [ $code -eq 100 ] && break
    done
    printf "\n"
}


xrc str # Rely on @src str, consider remove this dependency
ui_yesno() {
    local p
    while true; do
        read -r -p "$1 (Input 'y' for yes or 'n' for no): " p
        # TODO: Rely on @src str, consider remove this dependency
        p="$(str_trim "$p")"
        if [ "$p" == "y" ]; then
            return 0
        fi

        if [ "$p" == "n" ]; then
            return 1
        fi
    done
}

ui_select() {
    echo "" >&2
    echo "${MSG:-"Select in the following list:"}" >&2
    local x=0
    for i in "$@"; do
        (( x=x+1 ))
        echo "$x: $i" >&2
    done
    echo "" >&2

    local choice
    while true; do
        read -r -p "Input your choice: " choice >&2
        if [[ "$choice" =~ ^[0-9]+$ ]]; then
            if [ "$choice" -gt 0 ] && [ "$choice" -le "$#" ]; then
                echo "$choice"
                return 0
            fi
        fi
    done
}

ui_readint() {
    local min=${1:?Provide min}
    local max=${2:?Provide max}

    local choice
    while true; do
        read -r -p "${MSG:-Read integer: }" choice
        if [[ "$choice" =~ ^[0-9]+$ ]]; then
            if [ "$choice" -ge "$min" ] && [ "$choice" -le "$max" ]; then
                echo "$choice"
                return 0
            fi
        fi
    done
}

# A=$(ui_read_integer)


ui_color(){
  #  https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes
  :
}



COLP() {
    tput setaf "$1"
    shift
    echo -ne "$@"
    tput sgr0
}

COLBP() {
    tput setaf "$1"
    tput bold
    shift
    echo -ne "$@"
    tput sgr0
}

ERROR() { COLBP 1 "$@"; }
WARN() { COLBP 3 "$@"; }
INFO() { COLBP 2 "$@"; }
FINE() { COLBP 4 "$@"; }

@log() { COLBP 4 "$@"; }
@warn() { COLBP 3 "$@"; }
@err() { COLBP 1 "$@"; }
# @info() { COLBP 2 "$@"; }

@echop() {
    [ '' != "$FG" ] && tput setaf "$FG"
    [ '' != "$BG" ] && tput setab "$BG"
    tput bold
    echo "$@"
    tput sgr0
}

# ui
{
    export UI_BLACK=0
    export UI_RED=1
    export UI_GREEN=2
    export UI_YELLOW=3
    export UI_BLUE=4
    export UI_MAGNETA=5
    export UI_CYAN=6
    export UI_BLACK=7
}

# shellcheck disable=SC2155
{
    export UI_BG_BLUE="$(tput setab 4)"
    export UI_BG_BLACK="$(tput setab 0)"
    export UI_FG_GREEN="$(tput setaf 2)"
    export UI_FG_WHITE="$(tput setaf 7)"
}

# Special characters
# https://unix.stackexchange.com/questions/343934/print-check-cross-mark-in-shell-script

